第三章：Erlang基础
=======================
   

  
原子
------------------------------------
原子以小写字母开头，后面可以是字母、数字或@。如cat , apple_to. 另一种表示方法是用单引号括起来，这时原子可包含任意字符

  

变量
-------------------------------------
变量以大写字母开头，后面可接任意字符
::
   >1 X = 10.
   10
   >2 X.
   10

变量的不变性
^^^^^^^^^^^^^^^^^
有人觉得这种说法有些拗口，另一种说法是“单次赋值特性”，在赋值前，变量是
“自由”的，一旦被赋值，便不能再改变。



方便调试：
C，Java等语言的变量往往在程序的不同地方多次修改了值，要找出哪次是修改是错误的非常困难

利于并行化：



元组
--------------------------------
  
元组是一种容器，用来将不同的元素组合为一个实体，如{cat , dog}，{lilly, 165}, 

每个元素可以是不同类型，一旦元组建立，元素个数将不能改变。

通常，我们可以给元组的首元素命名，标示该元组的含义，如{pet, cat ,dog}. {point, 4, 5}


元组的作用：
^^^^^^^^^^^^^^
返回多个值

元组可以嵌套，并由此构造复杂的结构。

用模式匹配操作元组
^^^^^^^^^^^^^^^^^^^^
变量的"并行赋值"

两个元组的元素一一对应，将对应的变量和值绑定
::
   >1 {Math,English,Computer} = {67,80,90}
   >2 Math.
   67


提取元组中某个元素的值
::
   >1 Score={wang,{math, 77},{english, 80},{computer, 90}}.
   >2 {_,{_,Math_score},{_,_},{_,_}}=Score.
   >3 Math_Score.
   77




列表
----------------
列表可以包含多个元素，但是数目可变。
::
    1> Num = [1, 2, 3, 4, 5].
    2> Score = [{math, 80}, {english, 90}].

列表的各个元素类型可以不同
::
    3> [9, appple, {books, math, english}, [3, 4, 5]]


列表操作符
^^^^^^^^^^^^^^^^^^
“|”, 用来分割列表的第一个元素和剩下的元素
::
    4> [First | Rest] = [1,2,3,4,5].
    [1,2,3,4,5]
    5> First.
    1
    6> Rest.
    [2,3,4,5]

"++"连接两个列表

用模式匹配操作列表
^^^^^^^^^^^^^^^^^^^^

例：
::
    >1 [H|T] = [1,2,3]. %H绑定为1，T绑定为[2,3]
    >2 H.
    1
    >3 [A,B|C] = [1,2,3,4].
    >4 A.
    1






列表解析
-----------------------
List comprehension,有的书译为“列表内涵”，“表理解”，“列表速构”等。
中学学集合时，讲到一种它的表示方法，如{x|x^2=0}







函数
-------------------




高阶函数
^^^^^^^^

::  
    map(_, [])    -> [];
    map(F,[H|T])  -> [F(H)|map(F, T)].


::  
    filter()


::
    fold

  

匿名函数
^^^^^^^^^

  