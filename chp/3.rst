第三章：Erlang基础
=======================
   
  
数据类型
---------------------------



算式表达式
-----------------------------------
 
运算符             描述
X rem Y          X除以Y的余数 
X div Y          X整除Y
X band Y         X和Y的位与
X bor  Y         X和Y的位或
X bxor Y         X和Y的位异或
X bsl  N         X左移N位
X bsr  N         X右移N位
   


  
原子
------------------------------------
原子以小写字母开头，后面可以是字母、数字或@。如cat , apple_@to. 另一种表示方法是用但引号括起来，这时原子可包含任意字符

  

变量
-------------------------------------
  变量以大写字母开头，后面可接任意字符
::
   >1 X = 10.
   10
   >2 X.
   10

变量的不变性
^^^^^^^^^^^^^^^^^
有人觉得这种说法有些拗口或不严谨，换种说法，在赋值前，变量是
“自由”的，一旦被赋值，便不能再改变。

变量的单次赋值是函数式编程的特性之一。

方便调试：
C，Java等语言的变量往往在程序的不同地方多次修改了值，要找出哪次是修改是错误的非常困难

利于并行化：



模式匹配
-----------------------------

元组
--------------------------------
  
元组是一种容器，类似其他语言的“记录”和“结构体”，用来将不同的元素组合为一个实体，如{cat , dog}，{lilly, 165}, 

每个元素可以是不同类型，一旦元组建立，元素个数将不能改变。

通常，我们可以给元组的首元素命名，标示该元组的含义，如{pet, cat ,dog}. {point, 4, 5}


元组的作用：

返回多个值
元组可以嵌套，并由此构造复杂的结构。在后面章节中，我们将用元组构造平衡二叉树。

从元组中取值:



列表
----------------
列表可以包含多个元素，但是数目可变。
::
    1> Num = [1, 2, 3, 4, 5].
    2> Score = [{math, 80}, {english, 90}].

列表的各个元素类型可以不同
::
    3> [9, appple, {books, math, english}, [3, 4, 5]]


列表操作符“|”, 用来分割列表的第一个元素和剩下的元素
::
    4> [First | Rest] = [1,2,3,4,5].
    [1,2,3,4,5]
    5> First.
    1
    6> Rest.
    [2,3,4,5]




列表解析
-----------------------
List comprehension,有的书译为“列表内涵”，“表理解”等。












二进制类型
------------------------



函数
-------------------
定义
^^^^^^^


高阶函数
^^^^^^^^

::  
    map(_, [])    -> [];
    map(F,[H|T])  -> [F(H)|map(F, T)].


::  
    filter()


::
    fold

  

匿名函数
^^^^^^^^^

  