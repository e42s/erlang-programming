
历史：

  1981 爱立信 CSLab成立
  
  1987 The First experiments with Erlang
  1993 Distribution is added to Eralng
  2006 SMP support is added to Erlang

适合做什么：
  互联网应用服务器
  消息系统  ，RabbitMQ
  海量存储
  网关代理服务器
  异构系统黏合
  软实时系统

 IO密集型、网络密集型、集群密集型、粘合剂。。

异构性
   不同平台
     -Windows(SMP的支持有待改进)
     -Linux
   不同的体系结构
     -无需关心endianes问题
     -工业级协议的支持(asn.1, snmp等)

成熟项目：
   RabbitMQ
   ejbberd
   CouchDB
   riak
   membase

推广障碍
    函数式语言, 开发人员少, 招聘成本高 
    独特的并发和错误处理哲学
    开发社区偏小，知识积累不够
    应用库偏少
    软件经理不了解

一、架构模型
1、问题领域
       并发
       软实时：定时器
       分布式：多节点系统
       硬件交互：高效的设备驱动、上下文交换
       容错性
       持续运行


2、哲学：原理/核心思想
        


3、预定义部件
    描述方式：接口、协议、动态和静态结构
    配置方式

4、系统需求
   并发性：创建/销毁并发进程代价小
   错误封装
   故障检测：本地异常、远程异常
   故障识别
   代码升级
   持久存储

5、语言需求
   封装原语：多种手段限制错误蔓延
   并发性：轻量化进程，上下文切换、消息传递高效，合理分析CPU时间
   错误检测原语：监控进程
   位置透明：如果知道一个进程的Pid，可以向他发消息，无论是本地还是远程
   动态代码升级

6、库需求
   持久存储
   设备驱动
   代码升级
   运行基础

   本来可以由操作系统提供的许多特性被移植到语言中，操作系统就只需要提供设备驱动的一组原语就够了

7、应用程序库
    supervisor
    gen_server
    gen_event
    gen_fsm


二、抽象出并发
三、错误处理
四、可容错系统
五、构建应用
1、behaviour
2、Generic Server
3  Event Manager
4  Finite State Machine
5  Supervisor
6  Application
7  release

六、案例研究
   AXD301
   邮件加固器
   SSL加速器
   OpenPorker

   




