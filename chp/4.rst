第四章：函数式编程
=============================
函数式语言可以使用简短，紧凑而直观的代码来完成工作。它提供了丰富的方法来表达抽象概念

历史
--------------

1958年，John McCarthy创造了第一个函数式语言Lisp，首先提出了很多编程思想，如数据结构、垃圾回收动态类型等。

70年代,Robin Milner开发了ML语言，它添加了类型的概念，具有强大的类型推理机制。1996年Ocaml诞生，它是对ML的扩展，将面向对象和函数式方法结合在一起。


声明式风格
---------------


   
性能
-------------------------
递归
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

续延
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

程序变换
^^^^^^^^^^^^^^^^^^^^^^^^

CPS?
ANF?


表现力
-------------------

模式匹配
^^^^^^^^^^^^^^^^^^^^^^^^^^


1.模式匹配实现多态
::
     -module(area).
     -export([area/1])
    
     %正方形
     area({square, Side}) ->
         Side*Side;

     %圆形
     area({circle, Radius}) ->
        3.14*Radius*Radius;

     %三角形
     area({triangle, A, B, C}) ->
         S = (A + B + C)/2,
         math:sqrt(S*(S-A)*(S-B)(S-C));

     %其他形状
     area(Other) ->
         {undifined, Other}.




    -

列表解析
^^^^^^^^^^^^^^^^^^^^^^^^^
1.数据查询
::
     >1 Likes=[{yao, erlang},{wang,java},{qi, php},{yang, c#},{chen,java}]
     %查询一：Yao喜欢什么？
     >2 [X||{P,X} <- Likes,  P=:=yao]
     %查询二：谁喜欢Java？
     >3 [P||{P, X} <- Likes, X=:=java]
     
可以将以上的查询和表达式构造成函数，函数接受输入参数，并将上面的表达式抽象后作为函数体，这样其功能就大大增强了。

2.定义树及其搜索函数





惰性求值
^^^^^^^^^^^^^^^^^^^^^^^^^^^


遍历list的方式一般为 [ Head | Tail], 可以利用erlang的求值机制,建立1个延迟列表, 要实现它, Tail 是一个fun, 它返回一个新的 [ Head1 | Tail1 ], Tail1是个递归的fun, 延迟列表的好处是可以避免一次生成一个很大的列表, 可以减少内存的使用, 只有在需要的时候才生成后续的值,   延迟列表适合于, 列表里的值是有规律的, 按顺序存取的,每次取一个值.例如要生成从0开始的无穷序列, 
::
    -module(lazy).
    -export(next).

    next(Seq) ->
         func()  -> [Seq | next(Seq+1) ] end.


测试
::
    1> F = delay:next(0).
    #Fun<delay.0.5801025>
    2> [ Seq | NextF] = F().
    [0|#Fun<delay.0.5801025>]
    3> Seq .
    0
    4> [ Seq1 | NextF1] = NextF().
    [1|#Fun<delay.0.5801025>]
    5> Seq1 .
    1

